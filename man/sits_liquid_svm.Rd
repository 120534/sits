% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sits_machine_learning.R
\name{sits_liquid_svm}
\alias{sits_liquid_svm}
\title{Train a SITS classification model using a liquidSVM package}
\usage{
sits_liquid_svm(data.tb = NULL, normalize = TRUE,
  formula = sits_formula_logref(), threads = 0, partition_choice = 0,
  grid_choice = 2, adaptivity_control = 0, random_seed = -1,
  mc_type = "AvA_hinge", predict.prob = FALSE, do.select = TRUE, ...)
}
\arguments{
\item{data.tb}{time series with the training samples}

\item{normalize}{(boolean) 0 = no normalization, 1 = normalize per band}

\item{formula}{symbolic description of the model to be fit. SITS offers a set of such formulas (default: sits_svm)}

\item{threads}{number of cores for computing the kernel matrices (0 = uses all cores)}

\item{partition_choice}{determines the way the input space is partitioned (0 = disables, 5 = usually best)}

\item{grid_choice}{size of hyper-parameter grid used during training (0 = 10 x 10 grid, 1 = 15 x 15; 2 = 20 x 20)}

\item{adaptivity_control}{use adaptive search heuristic (default 0 - disables heuristic)}

\item{random_seed}{seed for the random generator (default -1 uses the internal timer)}

\item{mc_type}{strategy for multiclass classification ("OvA_ls", "AvA_ls", "AvA_hinge")}

\item{predict.prob}{if TRUE a LS-svm will be trained and conditional probs will be estimated}

\item{do.select}{if TRUE also does the whole selection for this model}

\item{...}{other parameters to be passed to liquidSVM::svmMulticlass function}
}
\value{
result          fitted model function to be passed to sits_predict
}
\description{
This function receives a tibble with a set of attributes X for each observation Y
These attributes are distance metrics between patterns and observations, obtained by a distance
function in SITS (see \code{\link[sits]{sits_distances}}).
The SVM algorithm is used for multiclass-classification.
For this purpose, it uses the "one-against-one" approach, in which k(k-1)/2 binary
classifiers are trained; the appropriate class is found by a voting scheme.
This function is a front-end to the "svm" method in the "liquidSVM" package.
Please refer to the documentation in that package for more details.

The grid_choice parameter is the most important one, since it controls the choice of hyperparameters
gamma (bandwidth of the kernel) and lambda (regularization).

grid_choice   0         1        2
gamma_steps   10       15       20
lambda_steps  10       15       20
min_gamma     0.2     0.1     0.05
max_gamma     5.0     10.0    20.0
min_lambda    0.001   0.0001  0.00001
max_lambda    0.01    0.01    0.01

Multiclass classification has to be reduced to binary classification.
There are two strategies for this:
all-vs-all (AvA): for every pairing of classes a binary SVM is trained
one-vs-all (OvA): for every class a binary SVM is trained with that class as one label
                  and all other classes are clumped together to another label
different combinations of AvA and OvA can be used with decision functions "hinge" and "ls" (least squares)
}
\examples{
\donttest{
# Retrieve the set of samples for the Mato Grosso region (provided by EMBRAPA)
data(samples_MT_ndvi)
# Build an SVM model
svm_model <- sits_train(samples_MT_ndvi, sits_liquid_svm())
# get a point
data(point_ndvi)
# classify the point
class.tb <- sits_classify (point_ndvi, svm_model)
# plot the classification
sits_plot(class.tb)
}
}
\author{
Gilberto Camara, \email{gilberto.camara@inpe.br}
}
