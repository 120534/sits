% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sits_machine_learning.R
\name{sits_train}
\alias{sits_train}
\title{Train SITS classification models}
\usage{
sits_train(distances.tb, ml_method = sits_svm())
}
\arguments{
\item{distances.tb}{a time series with a set of distance measures for each training sample}

\item{ml_method}{a machine learning method that returns a model for prediction}
}
\value{
result          a model fitted into input data given by train_method parameter
}
\description{
Given a tibble with a set of distance measures,
returns trained models using support vector machines.
#' After defining the training samples, the users need to provide a machine learning model.
Currenly, sits supports the following models:
'svm' (see \code{\link[sits]{sits_svm}}), 'random forest' (see \code{\link[sits]{sits_rfor}}),
'boosting' (see \code{\link[sits]{sits_gbm}}), 'lda' (see \code{\link[sits]{sits_lda}}),
'qda' (see \code{\link[sits]{sits_qda}}), multinomial logit' (see \code{\link[sits]{sits_mlr}}),
'lasso' (see \code{\link[sits]{sits_mlr}}), and 'ridge' (see \code{\link[sits]{sits_mlr}}).

The sits_train function is called inside \code{\link[sits]{sits_classify}}
and \code{\link[sits]{sits_classify_raster}}, so the user does not need
to explicitly use this function. Please see the above-mention classification functions.
}
\examples{

# Retrieve the set of samples for the Mato Grosso region (provided by EMBRAPA)
samples.tb <- readRDS(system.file("extdata/time_series/embrapa_mt.rds", package = "sits"))
samples.tb <- sits_select (samples.tb, bands = c("ndvi", "evi", "nir"))
# find the distance from the data
distances.tb <- sits_distances_from_data (samples.tb)
# find a training model based on the distances
ml_model <- sits_train (distances.tb, ml_method = sits_svm(kernel = "radial", cost = 10))
# get a point using the WTSS server
point.tb <- readRDS(system.file("extdata/time_series/point.rds", package = "sits"))
point.tb <- sits_select (point.tb, bands = c("ndvi", "evi", "nir"))
# align the point to the samples (breaks a long time series into intervals)
point_align.tb <- sits_align(point.tb, samples.tb)
# calculate the distances for the point
dist_point.tb <- sits_distances_from_data(point_align.tb)
# predict the classification
predicted.vec <- sits_predict(dist_point.tb, ml_model)

# NOTE: the above code shows a step-by-step approach to classification.
# Users are recommended to use the "sits_classify" function, which
# calls the "sits_train" function is called internally.
# The following code is recommended:

# Retrieve the set of samples for the Mato Grosso region (provided by EMBRAPA)
samples.tb <- readRDS(system.file("extdata/time_series/embrapa_mt.rds", package = "sits"))
samples.tb <- sits_select (samples.tb, bands = c("ndvi", "evi", "nir"))
# get a point using the WTSS server
point.tb <- readRDS(system.file("extdata/time_series/point.rds", package = "sits"))
point.tb <- sits_select (point.tb, bands = c("ndvi", "evi", "nir"))
# classify the point
class.tb <- sits_classify (point.tb, samples.tb,
       ml_method = sits_svm(kernel = "radial", cost = 10))

}
\author{
Rolf Simoes, \email{rolf.simoes@inpe.br}

Alexandre Xavier Ywata de Carvalho, \email{alexandre.ywata@ipea.gov.br}

Gilberto Camara, \email{gilberto.camara@inpe.br}
}
